<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Directline WebSockets">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Balance Check">
        <intProp name="ThreadGroup.num_threads">5</intProp>
        <intProp name="ThreadGroup.ramp_time">10</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Utterance file for thread group" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="utterancesFilePath" elementType="Argument">
              <stringProp name="Argument.name">utterancesFilePath</stringProp>
              <stringProp name="Argument.value">check_account_balance_utterances.csv</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Run main logic" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-979894769">Directline WebSockets</stringProp>
            <stringProp name="-1313007342">Connect to Direcline and run</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Make payment" enabled="true">
        <intProp name="ThreadGroup.num_threads">5</intProp>
        <intProp name="ThreadGroup.ramp_time">10</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Utterance file for thread group" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="utterancesFilePath" elementType="Argument">
              <stringProp name="Argument.name">utterancesFilePath</stringProp>
              <stringProp name="Argument.value">make_payment_utterances.csv</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Run main logic" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-979894769">Directline WebSockets</stringProp>
            <stringProp name="-1313007342">Connect to Direcline and run</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Connect to Direcline and run" enabled="false"/>
      <hashTree>
         <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Init Shared Config Values">
          <collectionProp name="Arguments.arguments">
            <elementProp name="copilotTokenEndpoint" elementType="Argument">
              <stringProp name="Argument.name">copilotTokenEndpoint</stringProp>
              <stringProp name="Argument.value">see here for instructions: https://learn.microsoft.com/en-us/microsoft-copilot-studio/publication-connect-bot-to-custom-application#connect-your-copilot-to-a-web-based-app</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="directlineEndpoint" elementType="Argument">
              <stringProp name="Argument.name">directlineEndpoint</stringProp>
              <stringProp name="Argument.value">see here for instructions: https://learn.microsoft.com/en-us/azure/bot-service/rest-api/bot-framework-rest-direct-line-3-0-api-reference?view=azure-bot-service-4.0#base-uri</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="directLineSecret" elementType="Argument">
              <stringProp name="Argument.name">directLineSecret</stringProp>
              <stringProp name="Argument.value">see here for instructions: https://learn.microsoft.com/en-us/microsoft-copilot-studio/configure-web-security#enable-or-disable-web-channel-security</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Use token endpoint?" enabled="true">
          <stringProp name="IfController.condition">${__javaScript(&quot;${copilotTokenEndpoint}&quot; != &quot;&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Token" enabled="true">
            <stringProp name="HTTPSampler.domain">${urlDomain}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">${urlPath}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Extract domain and path from token endpoint" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">// Get the URL from a User Defined Variable
def fullUrl = vars.get(&quot;copilotTokenEndpoint&quot;)

// Define the regex patterns to extract parts of the URL
def domainPattern = /https:\/\/([^\/]+)/
def pathPattern = /https:\/\/[^\/]+(\/.*)/

// Extract domain and path using the patterns
def domainMatcher = (fullUrl =~ domainPattern)
def pathMatcher = (fullUrl =~ pathPattern)

// Check if matches are found and assign them to variables
if (domainMatcher) {
    vars.put(&quot;urlDomain&quot;, domainMatcher[0][1])
} else {
    vars.put(&quot;urlDomain&quot;, &quot;not_found&quot;)
}

if (pathMatcher) {
    vars.put(&quot;urlPath&quot;, pathMatcher[0][1])
} else {
    vars.put(&quot;urlPath&quot;, &quot;not_found&quot;)
}

// Log the results for verification
log.info(&quot;Extracted Domain: ${vars.get(&quot;urlDomain&quot;)}&quot;)
log.info(&quot;Extracted Path: ${vars.get(&quot;urlPath&quot;)}&quot;)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Token" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Use directline secret?" enabled="true">
          <stringProp name="IfController.condition">${__javaScript(&quot;${copilotTokenEndpoint}&quot; == &quot;&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Set Directline Token in Header" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value"> Bearer ${directLineSecret}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Token with secret" enabled="true">
            <stringProp name="HTTPSampler.domain">${directlineEndpoint}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">v3/directline/tokens/generate</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Token" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Set Authentication Header for Start Conversation" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${token}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Start Conversation" enabled="true">
          <stringProp name="HTTPSampler.domain">directline.botframework.com</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/v3/directline/conversations</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Conversation Token &amp; ID" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">conversationId; conversationToken; streamUrl</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.conversationId; $.token; $.streamUrl</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">null;null;null</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Parse Token Endpoint" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def streamUrl = vars.get(&quot;streamUrl&quot;)
log.info(streamUrl)

// Remove the &apos;wss://&apos; prefix
def urlWithoutProtocol = streamUrl.replaceFirst(&quot;wss://&quot;, &quot;&quot;)

// Split the URL into hostname and path
def splitIndex = urlWithoutProtocol.indexOf(&apos;/&apos;)
def hostname = urlWithoutProtocol.substring(0, splitIndex)
def path = urlWithoutProtocol.substring(splitIndex)

log.info(&quot;Hostname: &quot; + hostname)
log.info(&quot;Path: &quot; + path)

// Store the values in variables for further use
vars.put(&quot;socketHostname&quot;, hostname)
vars.put(&quot;socketPath&quot;, path)
</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <eu.luminis.jmeter.wssampler.OpenWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.OpenWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.OpenWebSocketSampler" testname="WebSocket Open Connection" enabled="true">
          <boolProp name="TLS">true</boolProp>
          <stringProp name="server">${socketHostname}</stringProp>
          <stringProp name="port">443</stringProp>
          <stringProp name="path">${socketPath}</stringProp>
          <stringProp name="connectTimeout">20000</stringProp>
          <stringProp name="readTimeout">6000</stringProp>
        </eu.luminis.jmeter.wssampler.OpenWebSocketSampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Set Authentication Header for Sending Activities" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${conversationToken}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Loop over utterances from file" enabled="true">
          <stringProp name="WhileController.condition">${__groovy(ctx.getVariables().get(&quot;utterance&quot;) != &quot;&lt;EOF&gt;&quot;)}</stringProp>
        </WhileController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Load utterances file" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">${utterancesFilePath}</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">false</boolProp>
            <stringProp name="shareMode">shareMode.thread</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">utterance</stringProp>
          </CSVDataSet>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If not end of file" enabled="true">
            <stringProp name="IfController.condition">${__groovy(ctx.getVariables().get(&quot;utterance&quot;) != &quot;&lt;EOF&gt;&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send utterance" enabled="true">
              <stringProp name="HTTPSampler.domain">directline.botframework.com</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/v3/directline/conversations/${conversationId}/activities</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;locale&quot;: &quot;en-EN&quot;,&#xd;
    &quot;type&quot;: &quot;message&quot;,&#xd;
    &quot;from&quot;: {&#xd;
        &quot;id&quot;: &quot;user1&quot;&#xd;
    },&#xd;
    &quot;text&quot;: &quot;${utterance}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Log timestaps and active threads" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// Get the previous SampleResult object
def prevSamplerResult = prev

// Get the start time of the previous sampler in milliseconds (epoch time)
long startTimeMillis = prevSamplerResult.getStartTime()

// Store the start time in a JMeter variable (if needed for future calculations)
vars.put(&quot;sendUtteranceStartTime&quot;, startTimeMillis.toString())

// Log the start time (optional)
log.info(&quot;Send utterance start time (milliseconds): &quot; + startTimeMillis)</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set websocketSuccess" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;websocketSuccess&quot;, &quot;true&quot;)</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="WebSocket did not return error" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(${websocketSuccess} == true)}</stringProp>
            </WhileController>
            <hashTree>
              <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="Read next frame" enabled="true">
                <boolProp name="TLS">false</boolProp>
                <stringProp name="server"></stringProp>
                <stringProp name="port">80</stringProp>
                <stringProp name="path"></stringProp>
                <stringProp name="connectTimeout">20000</stringProp>
                <stringProp name="dataType">Text</stringProp>
                <boolProp name="createNewConnection">false</boolProp>
                <stringProp name="readTimeout">10000</stringProp>
                <boolProp name="optional">false</boolProp>
              </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Check for websocket errors and write time diffs" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// Check if the previous read from the WebSocket was successful 
if (prev.isSuccessful()) {

	// Calculate time diffs
    
	// Retrieve the start time of the send utterance sampler from JMeter variables
	long startTimeMillis = vars.get(&quot;sendUtteranceStartTime&quot;).toLong()

	// Retrieve the end time of the last successful websocket sampler
	long endTimeMillis = prev.getEndTime()

	// Calculate the time difference (elapsed time)
	long timeDifference = endTimeMillis - startTimeMillis

	vars.put(&quot;tempTimeDifferenceMillis&quot;, timeDifference.toString())
	vars.put(&quot;tempEndTimeMillis&quot;, endTimeMillis.toString())


} else {
	
    // Get the response code (HTTP status or other protocol-specific code)
    def responseCode = prev.getResponseCode()
    
    // Get the response message (detailed message for the error)
    def responseMessage = prev.getResponseMessage()

    def timeDifferenceMillis = vars.get(&quot;tempTimeDifferenceMillis&quot;)
    vars.put(&quot;timeDifferenceMillis&quot;,timeDifferenceMillis)
    
    // Log the error details
    log.error(&quot;Error occurred in the previous step.&quot;)
    log.error(&quot;Response Code: &quot; + responseCode)
    log.error(&quot;Response Message: &quot; + responseMessage)
    vars.put(&quot;websocketSuccess&quot;, &quot;false&quot;)

	// Assuming last successfully read frame was the last Copilot response, based on the error code
 	if (responseCode == &quot;Websocket I/O error&quot;)
 	{
		SampleResult.setSampleLabel(&quot;Copilot Response&quot;)
		log.info(&quot;sendUtteranceStartTime: &quot; + vars.get(&quot;sendUtteranceStartTime&quot;) + &quot; tempEndTimeMillis: &quot; + vars.get(&quot;sendUtteranceStartTime&quot;) + &quot; total tine: &quot; + SampleResult.getTime())
    		SampleResult.setLatency(timeDifferenceMillis.toLong())
    		SampleResult.setStartTime(vars.get(&quot;sendUtteranceStartTime&quot;).toLong())
  		SampleResult.setEndTime(vars.get(&quot;tempEndTimeMillis&quot;).toLong())
  		SampleResult.setResponseMessage(&quot;copilot final message response time&quot;)
 	}
}
</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="WebSocket Sampler" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <eu.luminis.jmeter.wssampler.CloseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.CloseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.CloseWebSocketSampler" testname="WebSocket Close" enabled="true">
          <stringProp name="statusCode">1000</stringProp>
          <stringProp name="readTimeout">6000</stringProp>
        </eu.luminis.jmeter.wssampler.CloseWebSocketSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="RespTimeGraph.seriesselectionmatchlabel">Start Conversation</stringProp>
        <boolProp name="ResultCollector.success_only_logging">true</boolProp>
        <boolProp name="RespTimeGraph.seriesselection">true</boolProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TimesVsThreadsGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Times vs Threads">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
        <boolProp name="ResultCollector.success_only_logging">true</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ThreadsStateOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Active Threads Over Time">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
