kind: AdaptiveDialog
inputs:
  - kind: AutomaticTaskInput
    propertyName: UserQuery
    description: user input for searching cafes
    entity: StringPrebuiltEntity
    shouldPromptUser: false
    inputSettings:
      repeatCount: 0
      defaultValue: =Blank()

modelDescription: |-
  This is an intelligent cafe search topic that processes natural language queries to find Microsoft campus cafes.

    Features:
    - Extracts station hints from queries
    - Performs fuzzy matching for cafe names
    - Returns confidence scores for search results
    - Provides smart suggestions for ambiguous queries

    Returns:
    - High confidence (≥0.8): Direct cafe match
    - Medium confidence (0.5-0.8): Multiple suggestions
    - Low confidence (<0.5): No clear matches
beginDialog:
  kind: OnRedirect
  id: main
  actions:
    - kind: BeginDialog
      id: Cj1WJz
      input: {}
      dialog: msdyn_copilotforemployeeselfservice.topic.FacDiningGetCafesList
      output:
        binding:
          CafesCount: Topic.CafesCount
          CafesList: Topic.CafesList
          CafesListResponseStatusCode: Topic.CafesListResponseStatusCode

    - kind: ConditionGroup
      id: conditionGroup_rFvnfS
      conditions:
        - id: conditionItem_kLmPkU
          condition: =Topic.CafesCount > 0
          actions:
            - kind: SetVariable
              id: setVariable_C5DfHd
              variable: Topic.MatchedCafes
              value: |-
                =// Optimized Cafe Search Scoring Logic
                FirstN(
                    With(
                        {
                            // Normalize query once
                            normalizedQuery: Lower(Topic.UserQuery),
                            queryWords: Split(Lower(Topic.UserQuery), " "),

                            // Extract query without cafe prefix
                            baseQuery: If(
                                Or(
                                    StartsWith(Lower(Topic.UserQuery), "cafe "),
                                    StartsWith(Lower(Topic.UserQuery), "café ")
                                ),
                                Lower(Mid(Topic.UserQuery, 6)),
                                Lower(Topic.UserQuery)
                            ),

                            // Pre-calculate exact matches
                            exactMatches: Filter(
                                Topic.CafesList,
                                Or(
                                    Lower(name) = Lower(Topic.UserQuery),
                                    And(
                                        Or(
                                            StartsWith(Lower(Topic.UserQuery), "cafe "),
                                            StartsWith(Lower(Topic.UserQuery), "café ")
                                        ),
                                        Or(
                                            Lower(name) = "café " & Lower(Mid(Topic.UserQuery, 6)),
                                            Lower(name) = "cafe " & Lower(Mid(Topic.UserQuery, 6))
                                        )
                                    )
                                )
                            )
                        },

                        // Return exact matches with max score or perform scored search
                        If(
                            CountRows(exactMatches) > 0,

                            ForAll(
                                exactMatches,
                                {
                                    buildingId: buildingId,
                                    buildingName: buildingName,
                                    cafeId: cafeId,
                                    id: id,
                                    name: name,
                                    onlineAvailabilityCapability: onlineAvailabilityCapability,
                                    relevanceScore: 500,
                                    DisplayText: name & " (" & buildingName & ")",
                                    Value: id
                                }
                            ),

                            // Scored search
                            SortByColumns(
                                Filter(
                                    ForAll(
                                        Topic.CafesList,
                                        With(
                                            {
                                                lowerName: Lower(name),
                                                lowerBuilding: Lower(buildingName),
                                                normalizedName: Lower(Substitute(Substitute(Substitute(name, " ", ""), ":", ""), "-", "")),
                                                normalizedQueryClean: Lower(Substitute(Substitute(Substitute(Topic.UserQuery, " ", ""), ":", ""), "-", ""))
                                            },
                                            {
                                                buildingId: buildingId,
                                                buildingName: buildingName,
                                                cafeId: cafeId,
                                                id: id,
                                                name: name,
                                                onlineAvailabilityCapability: onlineAvailabilityCapability,

                                                relevanceScore:
                                                    // Cafe prefix pattern match (300 points)
                                                    If(
                                                        And(
                                                            Or(StartsWith(normalizedQuery, "cafe "), StartsWith(normalizedQuery, "café ")),
                                                            Or(
                                                                StartsWith(lowerName, "café " & baseQuery),
                                                                StartsWith(lowerName, "cafe " & baseQuery)
                                                            )
                                                        ),
                                                        300,
                                                        0
                                                    ) +

                                                    // Full substring match (150 points)
                                                    If(!IsBlank(Find(normalizedQuery, lowerName)), 150, 0) +

                                                    // Query without cafe prefix (140 points)
                                                    If(
                                                        baseQuery <> normalizedQuery && !IsBlank(Find(baseQuery, lowerName)),
                                                        140,
                                                        0
                                                    ) +

                                                    // All words found (120 points)
                                                    If(
                                                        CountIf(queryWords, !IsBlank(Value) && !IsBlank(Find(Value, lowerName))) = CountRows(queryWords),
                                                        120,
                                                        0
                                                    ) +

                                                    // Normalized match (80 points each direction)
                                                    If(!IsBlank(Find(normalizedQueryClean, normalizedName)), 80, 0) +
                                                    If(!IsBlank(Find(normalizedName, normalizedQueryClean)), 80, 0) +

                                                    // Number matching (100 points for exact, 90 with cafe prefix)
                                                    If(
                                                        !IsError(Value(Topic.UserQuery)) && name = Topic.UserQuery,
                                                        100,
                                                        If(
                                                            baseQuery <> normalizedQuery && !IsError(Value(baseQuery)) && !IsBlank(Find(baseQuery, name)),
                                                            90,
                                                            0
                                                        )
                                                    ) +

                                                    // Partial word matches (40 points each)
                                                    CountIf(queryWords, !IsBlank(Value) && Len(Value) > 1 && !IsBlank(Find(Value, lowerName))) * 40 +

                                                    // Number in name (30 points each)
                                                    CountIf(queryWords, !IsError(Value(Value)) && !IsBlank(Find(Value, name))) * 30 +

                                                    // Building matches (25 + 10 per word)
                                                    If(!IsBlank(Find(normalizedQuery, lowerBuilding)), 25, 0) +
                                                    CountIf(queryWords, !IsBlank(Value) && Len(Value) > 2 && !IsBlank(Find(Value, lowerBuilding))) * 10,

                                                DisplayText: name & " (" & buildingName & ")",
                                                Value: id
                                            }
                                        )
                                    ),
                                    relevanceScore > 0
                                ),
                                "relevanceScore",
                                SortOrder.Descending
                            )
                        )
                    ),
                    5
                )

            - kind: SetVariable
              id: setVariable_eoTzvz
              variable: Topic.MatchCount
              value: =CountRows(Topic.MatchedCafes)

            - kind: SetVariable
              id: setVariable_8tS7of
              variable: Topic.SearchConfidence
              value: |-
                =// Calculate search confidence based on match quality
                If(
                    Topic.MatchCount = 0, 0,
                    If(
                        Topic.MatchCount = 1,
                        // Single match - confidence based on relevance score
                        Min(First(Topic.MatchedCafes).relevanceScore / 500, 1),

                        // Multiple matches - confidence based on score distribution
                        With(
                            {
                                topScore: First(Topic.MatchedCafes).relevanceScore,
                                secondScore: If(Topic.MatchCount > 1, Last(FirstN(Topic.MatchedCafes, 2)).relevanceScore, 0)
                            },

                            // High confidence if clear winner
                            If(
                                topScore > 150 && (secondScore = 0 || topScore > secondScore * 1.5),
                                0.9,

                                // Medium confidence if reasonable matches
                                If(topScore > 80, 0.6, 0.3)
                            )
                        )
                    )
                )

            - kind: SetVariable
              id: setVariable_K9k04F
              variable: Topic.ResultType
              value: |-
                =If(
                    Topic.MatchCount = 0, "NoMatch",
                    If(Topic.MatchCount = 1, "SingleMatch", "MultipleMatches")
                )

            - kind: ConditionGroup
              id: conditionGroup_7YzVGE
              conditions:
                - id: conditionItem_LTZKnp
                  condition: =Topic.ResultType = "SingleMatch"
                  actions:
                    - kind: SetVariable
                      id: setVariable_vur73P
                      variable: Topic.CafeId
                      value: =First(Topic.MatchedCafes).id

                    - kind: SetVariable
                      id: setVariable_9PczAC
                      variable: Topic.CafeName
                      value: =First(Topic.MatchedCafes).name

      elseActions:
        - kind: SetVariable
          id: setVariable_f9z6Mk
          variable: Topic.ResultType
          value: NoMatches

        - kind: SetVariable
          id: setVariable_GWh1JI
          variable: Topic.MatchCount
          value: 0

        - kind: SetVariable
          id: setVariable_NJsKeJ
          variable: Topic.SearchConfidence
          value: 0

        - kind: SetVariable
          id: setVariable_F9uxzv
          variable: Topic.MatchedCafes
          value: =Table()

        - kind: SetVariable
          id: setVariable_IuRiQ4
          variable: Topic.CafeId
          value: =Blank()

        - kind: SetVariable
          id: setVariable_SGzzwC
          variable: Topic.CafeName
          value: =Blank()

inputType:
  properties:
    UserQuery:
      displayName: UserQuery
      description: user input for searching cafes
      type: String

outputType:
  properties:
    CafeId:
      displayName: CafeId
      description: Unique identifier of the matched cafe (only set for high confidence)
      type: String

    CafeName:
      displayName: CafeName
      description: Display name of the matched cafe (only set for high confidence)
      type: String

    MatchCount:
      displayName: MatchCount
      description: The number of matches that were returned by the search
      type: Number

    MatchedCafes:
      displayName: MatchedCafes
      type:
        kind: Table
        properties:
          buildingId: String
          buildingName: String
          cafeId: Number
          DisplayText: String
          id: String
          name: String
          onlineAvailabilityCapability: String
          relevanceScore: Number
          Value: String

    ResultType:
      displayName: ResultType
      description: The result type, "SingleMatch", "MultipleMatches", "NoMatches"
      type: String

    SearchConfidence:
      displayName: SearchConfidence
      description: |-
        Confidence score (0-1) of the search result
                - ≥0.8: High confidence, single match
                - 0.5-0.8: Medium confidence, suggestions available
                - <0.5: Low confidence, no clear matches
      type: Number
